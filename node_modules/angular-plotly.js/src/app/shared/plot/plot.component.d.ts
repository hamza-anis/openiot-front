import { ElementRef, EventEmitter, OnDestroy, OnChanges, OnInit, SimpleChanges, DoCheck, IterableDiffer, IterableDiffers, KeyValueDiffer, KeyValueDiffers } from '@angular/core';
import { PlotlyService } from '../plotly.service';
import { Plotly } from '../plotly.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PlotComponent implements OnInit, OnChanges, OnDestroy, DoCheck {
    plotly: PlotlyService;
    iterableDiffers: IterableDiffers;
    keyValueDiffers: KeyValueDiffers;
    protected defaultClassName: string;
    plotlyInstance: Plotly.PlotlyHTMLElement;
    resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;
    layoutDiffer: KeyValueDiffer<string, any>;
    dataDiffer: IterableDiffer<Plotly.Data>;
    plotEl: ElementRef;
    data?: Plotly.Data[];
    layout?: Partial<Plotly.Layout>;
    config?: Partial<Plotly.Config>;
    frames?: Partial<Plotly.Config>[];
    style?: {
        [key: string]: string;
    };
    divId?: string;
    revision: number;
    className?: string | string[];
    debug: boolean;
    useResizeHandler: boolean;
    updateOnLayoutChange: boolean;
    updateOnDataChange: boolean;
    updateOnlyWithRevision: boolean;
    initialized: EventEmitter<Plotly.Figure>;
    update: EventEmitter<Plotly.Figure>;
    purge: EventEmitter<Plotly.Figure>;
    error: EventEmitter<Error>;
    afterExport: EventEmitter<any>;
    afterPlot: EventEmitter<any>;
    animated: EventEmitter<any>;
    animatingFrame: EventEmitter<any>;
    animationInterrupted: EventEmitter<any>;
    autoSize: EventEmitter<any>;
    beforeExport: EventEmitter<any>;
    buttonClicked: EventEmitter<any>;
    click: EventEmitter<any>;
    plotly_click: EventEmitter<any>;
    clickAnnotation: EventEmitter<any>;
    deselect: EventEmitter<any>;
    doubleClick: EventEmitter<any>;
    framework: EventEmitter<any>;
    hover: EventEmitter<any>;
    legendClick: EventEmitter<any>;
    legendDoubleClick: EventEmitter<any>;
    relayout: EventEmitter<any>;
    restyle: EventEmitter<any>;
    redraw: EventEmitter<any>;
    selected: EventEmitter<any>;
    selecting: EventEmitter<any>;
    sliderChange: EventEmitter<any>;
    sliderEnd: EventEmitter<any>;
    sliderStart: EventEmitter<any>;
    transitioning: EventEmitter<any>;
    transitionInterrupted: EventEmitter<any>;
    unhover: EventEmitter<any>;
    relayouting: EventEmitter<any>;
    treemapclick: EventEmitter<any>;
    sunburstclick: EventEmitter<any>;
    eventNames: string[];
    constructor(plotly: PlotlyService, iterableDiffers: IterableDiffers, keyValueDiffers: KeyValueDiffers);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): boolean;
    getWindow(): any;
    getClassName(): string;
    createPlot(): Promise<void>;
    createFigure(): Plotly.Figure;
    updatePlot(): Promise<void>;
    updateWindowResizeHandler(): void;
    dataDifferTrackBy(_: number, item: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PlotComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PlotComponent, "plotly-plot", never, {
    "revision": "revision";
    "debug": "debug";
    "useResizeHandler": "useResizeHandler";
    "updateOnLayoutChange": "updateOnLayoutChange";
    "updateOnDataChange": "updateOnDataChange";
    "updateOnlyWithRevision": "updateOnlyWithRevision";
    "data": "data";
    "layout": "layout";
    "config": "config";
    "frames": "frames";
    "style": "style";
    "divId": "divId";
    "className": "className";
}, {
    "initialized": "initialized";
    "update": "update";
    "purge": "purge";
    "error": "error";
    "afterExport": "afterExport";
    "afterPlot": "afterPlot";
    "animated": "animated";
    "animatingFrame": "animatingFrame";
    "animationInterrupted": "animationInterrupted";
    "autoSize": "autoSize";
    "beforeExport": "beforeExport";
    "buttonClicked": "buttonClicked";
    "click": "click";
    "plotly_click": "plotly_click";
    "clickAnnotation": "clickAnnotation";
    "deselect": "deselect";
    "doubleClick": "doubleClick";
    "framework": "framework";
    "hover": "hover";
    "legendClick": "legendClick";
    "legendDoubleClick": "legendDoubleClick";
    "relayout": "relayout";
    "restyle": "restyle";
    "redraw": "redraw";
    "selected": "selected";
    "selecting": "selecting";
    "sliderChange": "sliderChange";
    "sliderEnd": "sliderEnd";
    "sliderStart": "sliderStart";
    "transitioning": "transitioning";
    "transitionInterrupted": "transitionInterrupted";
    "unhover": "unhover";
    "relayouting": "relayouting";
    "treemapclick": "treemapclick";
    "sunburstclick": "sunburstclick";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGxvdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgRG9DaGVjaywgSXRlcmFibGVEaWZmZXIsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXIsIEtleVZhbHVlRGlmZmVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxvdGx5U2VydmljZSB9IGZyb20gJy4uL3Bsb3RseS5zZXJ2aWNlJztcbmltcG9ydCB7IFBsb3RseSB9IGZyb20gJy4uL3Bsb3RseS5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGxvdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIERvQ2hlY2sge1xuICAgIHBsb3RseTogUGxvdGx5U2VydmljZTtcbiAgICBpdGVyYWJsZURpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycztcbiAgICBrZXlWYWx1ZURpZmZlcnM6IEtleVZhbHVlRGlmZmVycztcbiAgICBwcm90ZWN0ZWQgZGVmYXVsdENsYXNzTmFtZTogc3RyaW5nO1xuICAgIHBsb3RseUluc3RhbmNlOiBQbG90bHkuUGxvdGx5SFRNTEVsZW1lbnQ7XG4gICAgcmVzaXplSGFuZGxlcj86IChpbnN0YW5jZTogUGxvdGx5LlBsb3RseUhUTUxFbGVtZW50KSA9PiB2b2lkO1xuICAgIGxheW91dERpZmZlcjogS2V5VmFsdWVEaWZmZXI8c3RyaW5nLCBhbnk+O1xuICAgIGRhdGFEaWZmZXI6IEl0ZXJhYmxlRGlmZmVyPFBsb3RseS5EYXRhPjtcbiAgICBwbG90RWw6IEVsZW1lbnRSZWY7XG4gICAgZGF0YT86IFBsb3RseS5EYXRhW107XG4gICAgbGF5b3V0PzogUGFydGlhbDxQbG90bHkuTGF5b3V0PjtcbiAgICBjb25maWc/OiBQYXJ0aWFsPFBsb3RseS5Db25maWc+O1xuICAgIGZyYW1lcz86IFBhcnRpYWw8UGxvdGx5LkNvbmZpZz5bXTtcbiAgICBzdHlsZT86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogc3RyaW5nO1xuICAgIH07XG4gICAgZGl2SWQ/OiBzdHJpbmc7XG4gICAgcmV2aXNpb246IG51bWJlcjtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBkZWJ1ZzogYm9vbGVhbjtcbiAgICB1c2VSZXNpemVIYW5kbGVyOiBib29sZWFuO1xuICAgIHVwZGF0ZU9uTGF5b3V0Q2hhbmdlOiBib29sZWFuO1xuICAgIHVwZGF0ZU9uRGF0YUNoYW5nZTogYm9vbGVhbjtcbiAgICB1cGRhdGVPbmx5V2l0aFJldmlzaW9uOiBib29sZWFuO1xuICAgIGluaXRpYWxpemVkOiBFdmVudEVtaXR0ZXI8UGxvdGx5LkZpZ3VyZT47XG4gICAgdXBkYXRlOiBFdmVudEVtaXR0ZXI8UGxvdGx5LkZpZ3VyZT47XG4gICAgcHVyZ2U6IEV2ZW50RW1pdHRlcjxQbG90bHkuRmlndXJlPjtcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPEVycm9yPjtcbiAgICBhZnRlckV4cG9ydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWZ0ZXJQbG90OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBhbmltYXRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYW5pbWF0aW5nRnJhbWU6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFuaW1hdGlvbkludGVycnVwdGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBhdXRvU2l6ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYmVmb3JlRXhwb3J0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBidXR0b25DbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcGxvdGx5X2NsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjbGlja0Fubm90YXRpb246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRlc2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkb3VibGVDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZnJhbWV3b3JrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBob3ZlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbGVnZW5kQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGxlZ2VuZERvdWJsZUNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZWxheW91dDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcmVzdHlsZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcmVkcmF3OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc2VsZWN0aW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzbGlkZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHNsaWRlckVuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc2xpZGVyU3RhcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRyYW5zaXRpb25pbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRyYW5zaXRpb25JbnRlcnJ1cHRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdW5ob3ZlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcmVsYXlvdXRpbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHRyZWVtYXBjbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc3VuYnVyc3RjbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZXZlbnROYW1lczogc3RyaW5nW107XG4gICAgY29uc3RydWN0b3IocGxvdGx5OiBQbG90bHlTZXJ2aWNlLCBpdGVyYWJsZURpZmZlcnM6IEl0ZXJhYmxlRGlmZmVycywga2V5VmFsdWVEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogYm9vbGVhbjtcbiAgICBnZXRXaW5kb3coKTogYW55O1xuICAgIGdldENsYXNzTmFtZSgpOiBzdHJpbmc7XG4gICAgY3JlYXRlUGxvdCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGNyZWF0ZUZpZ3VyZSgpOiBQbG90bHkuRmlndXJlO1xuICAgIHVwZGF0ZVBsb3QoKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVXaW5kb3dSZXNpemVIYW5kbGVyKCk6IHZvaWQ7XG4gICAgZGF0YURpZmZlclRyYWNrQnkoXzogbnVtYmVyLCBpdGVtOiBhbnkpOiBhbnk7XG59XG4iXX0=